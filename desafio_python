class ContaBancaria:
    def __init__(self):
        self.limite_valor_saque = 500.0
        self.limite_quantidade_saque = 3
        self.saldo = 0.0
        self.extrato = []
        self.saques = 0

    def __str__(self):
        return f"{self.extrato}\nSaldo: R$ {self.saldo:.2f}"

    def depositar(self):
        valor = input("digite o valor para deposito -> ")
        if str(valor).isdecimal:
            aux = float(valor)
            if aux > 0:
                self.saldo += aux
                self.extrato += f"R$ {aux:.2f} D\n"
            else:
                print("valor invalido para deposito")
        else:
            print("digite valor adequado para deposito: ")

    def sacar(self):
        valor = input("digite o valor para saque -> ")
        if str(valor).isdecimal:
            aux = float(valor)
            if aux <= 0:
                print("valor invÃ¡lido para saque")
            elif self.saldo <= aux:
                print("falta de saldo na conta")
            elif aux > self.limite_valor_saque:
                print(f"limite do valor para saque ultrapassa o limite diario de R${self.limite_valor_saque:.2f}")
            elif self.saques >= self.limite_quantidade_saque:
                print(f"limite de saques diarios atigido: {self.limite_quantidade_saque}")
            else:
                self.saldo -= aux
                self.extrato += f'R$ {aux:.2f} S\n'
                self.saques += 1
        else:
            print("digite um valor adequado para saque: ")

menu = ''' 
[d] Depositar 
[s] Sacar 
[e] Extrato
[q] Sair

 => '''
conta = ContaBancaria()
while True:
    opcao = input(menu)
    if opcao == 'd':
        conta.depositar()
    elif opcao == 's':
        conta.sacar()
    elif opcao == 'e':
        print(conta)
    elif opcao == 'q':
        break
    else:
        print('opcao invalida, tente novamente')
